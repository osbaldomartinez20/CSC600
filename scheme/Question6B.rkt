(define (display-vector v)
  (do ((i 0 (+ i 1)))
    ((>= i (vector-length v))(display ""))
    (display (vector-ref v i)) (display " ")))

(define (read-matrix filename)
  (let* ((inport (open-input-file filename))
         (nrow (read inport))
         (ncol (read inport))
         (mat (make-vector nrow)))
    (do ((i 0 (+ i 1)))
      ((>= i nrow) (close-input-port inport) mat)
      (let ((row (make-vector ncol)))
        (do ((j 0 (+ j 1)))
            ((>= j ncol) (vector-set! mat i row))
            (vector-set! row j (read inport)))))))

(define (ro filename i)
  (define mat (read-matrix filename))
  (vector-ref mat i))

(define (co filename j)
  (define column (make-vector (vector-length (read-matrix filename))))
  (do ((i 0 (+ i 1)))
    ((>= i (vector-length (read-matrix filename))) column)
    (vector-set! column i (vector-ref (vector-ref (read-matrix filename) i) j))))

(define (col filename j)
  (display-vector (co filename j)))

(define (dot-product v1 v2)
  (do ((i 0 (+ i 1)) (sum 0 (+ sum (* (vector-ref v1 i) (vector-ref v2 i)))))
    ((>= i (vector-length v1)) sum)))

(define (mmul f1 f2 f3)
  (define nrow (vector-length (read-matrix f1)))
  (define ncol (vector-length (read-matrix f2)))
  (define outport (open-output-file f3))
  (display nrow outport) (display " " outport)
  (display ncol outport) (newline outport)
  (do ((i 0 (+ i 1)))
    ((>= i nrow) (close-output-port outport) (display ""))
    (let ((row (make-vector ncol)))
      (do ((j 0 (+ j 1)))
        ((>= j ncol) (display-vector row) (newline) (newline outport))
        (vector-set! row j (dot-product (ro f1 i) (co f2 j)))
        (display (vector-ref row j) outport) (display " " outport )))))